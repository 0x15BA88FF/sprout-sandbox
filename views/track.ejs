<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./components/head', { title: 'Track' }) %>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>

<body>
    <nav class="flex fixed top-0 w-screen p-2 z-50 bg-background-50 shadow-lg">
        <a href="/" class="w-max h-max"><svg class="icon-base" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black"><g clip-path="url(#clip0_101_8720)"><path fill-rule="evenodd" clip-rule="evenodd" d="M8.29303 12.7071C8.10556 12.5196 8.00024 12.2653 8.00024 12.0001C8.00024 11.7349 8.10556 11.4806 8.29303 11.2931L13.95 5.6361C14.0423 5.54059 14.1526 5.46441 14.2746 5.412C14.3966 5.35959 14.5279 5.332 14.6606 5.33085C14.7934 5.32969 14.9251 5.355 15.048 5.40528C15.1709 5.45556 15.2825 5.52981 15.3764 5.6237C15.4703 5.7176 15.5446 5.82925 15.5949 5.95214C15.6451 6.07504 15.6704 6.20672 15.6693 6.3395C15.6681 6.47228 15.6405 6.6035 15.5881 6.7255C15.5357 6.84751 15.4595 6.95785 15.364 7.0501L10.414 12.0001L15.364 16.9501C15.5462 17.1387 15.647 17.3913 15.6447 17.6535C15.6424 17.9157 15.5373 18.1665 15.3518 18.3519C15.1664 18.5373 14.9156 18.6425 14.6534 18.6448C14.3912 18.6471 14.1386 18.5463 13.95 18.3641L8.29303 12.7071Z" fill="black"/></g><defs><clipPath id="clip0_101_8720"><rect width="24" height="24" fill="white"/></clipPath></defs></svg></a>
    </nav>

    <div class="map fixed top-0 bg-background-400 w-screen h-screen" id="map"></div>

    <section class="fixed bottom-0 z-50 w-full flex flex-col p-4 bg-background-50 rounded-t-lg shadow-lg">
            <div class="header flex items-center justify-between">
                <h2>Delivery</h2>
            </div>
            <div class="flex flex-col gap-2">
                <%- include('./components/agentCard', { username: "Pascall", distance: "100", avatar: "" } ) %>
                <button class="button primary">Scan Now</button>
            </div>
    </section>

</body>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    const map = L.map('map').setView([51.505, -0.09], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '© OpenStreetMap contributors' }).addTo(map);

    let startMarker, endMarker, routeLayer, circle;

    // Function to calculate the destination point given a start point, distance in meters, and bearing in degrees
    function calculateDestination(lat, lon, distance, bearing) {
        const R = 6371e3;
        const φ1 = lat * Math.PI / 180;
        const λ1 = lon * Math.PI / 180;
        const θ = bearing * Math.PI / 180;
        const δ = distance / R;

        const φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) +
            Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
        const λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1),
            Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));

        const lat2 = φ2 * 180 / Math.PI;
        const lon2 = λ2 * 180 / Math.PI;

        return [lon2, lat2];
    }

    async function getRoute(start, end) {
        const response = await fetch(`/route?start=${ start }&end=${ end }`);
        const data = await response.json();
        const route = data.routes[0].geometry;

        // Add or update start and end markers
        const startCoords = start.split(',').map(Number);
        const endCoords = end.split(',').map(Number);

        if (startMarker) {
            startMarker.setLatLng([startCoords[1], startCoords[0]]);
        } else {
            startMarker = L.marker([startCoords[1], startCoords[0]]).addTo(map)
                .bindPopup('Start Point')
                .openPopup();
        }

        if (endMarker) {
            endMarker.setLatLng([endCoords[1], endCoords[0]]);
        } else {
            endMarker = L.marker([endCoords[1], endCoords[0]]).addTo(map)
                .bindPopup('End Point')
                .openPopup();
        }

        // const cirlce =  L.circle([startCoords[1], startCoords[0]],{ radius:accuracy })

        // Add or update route layer
        if (routeLayer) {
            routeLayer.clearLayers();
            routeLayer.addData(route);
        } else {
            routeLayer = L.geoJSON(route).addTo(map);
        }
        map.fitBounds(routeLayer.getBounds());
    }

    function watchUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(position => {
                const startLat = position.coords.latitude;
                const startLon = position.coords.longitude;
                const accuracy = position.coords.accuracy;
                const start = `${startLon},${startLat}`;

                // Calculate endpoint 100 meters to the east
                const [endLon, endLat] = calculateDestination(startLat, startLon, 20, 90); // 90 degrees for east
                const end = `${endLon},${endLat}`;

                getRoute(start, end);
            }, error => {
                alert('Error getting your location. Please ensure location services are enabled.');
            }, {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            });
        } else {
            alert('Geolocation is not supported by this browser.');
        }
    }

    watchUserLocation();
</script>

</html>
