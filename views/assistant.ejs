<!DOCTYPE html>
<html lang="en">

    <head>
        <%- include('./components/head', { title: 'AI Assistant' }) %>
    </head>

    <body class="pb-9 bg-gray-200">
        <nav class="flex py-5 z-20 h-16 w-full sm:px-16 px-6 bg-white fixed top-0 items-center">
            <div class="w-full flex justify-between items-center max-w-7xl mx-auto">
                <a href="/" class="button icon-md"><svg xmlns="http://www.w3.org/2000/svg" fill="black" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M12.5 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5M10 8a.5.5 0 0 1-.5.5H3.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L3.707 7.5H9.5a.5.5 0 0 1 .5.5"/></svg></a>
                <p class=" justify-start hidden sm:flex gap-10 w-auto h-9 flex-row font-bold text-3xl font-sans sm:pl-40 text-green-500">AI Assistant | Kwesi™</p>
                <p class="sm:hidden flex flex-1 justify-end items-center font-bold text-2xl text-green-500 ">Kwesi™</p>
            </div>
        </nav>

        <div id="chat-container" class="h-screen w-full pt-24 p-10 overflow-y-auto"></div>

        <div class="justify-end">
            <form id="form" class="relative w-full">
                <div class=" flex w-full fixed bottom-0 left-0 right-0 p-4 bg-gray-200  justify-center">
                    <div class="relative w-full max-w-2xl">
                        <input id="input" class="w-full h-auto p-3 pr-12 text-white rounded-3xl border bg-gray-600" autocomplete="off" placeholder="Ask Kwesi any question..." />
                        <button id="button" class="absolute top-1/2 right-2 transform -translate-y-1/2 bg-primary-400 text-white rounded-lg p-2"><svg xmlns="http://www.w3.org/2000/svg" fill="white" viewBox="0 0 16 16"><path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/></svg></button>
                    </div>
                </div>
            </form>
        </div>

        <div id="loading-spinner" class="hidden justify-center items-center absolute top-0 left-0 w-full h-full bg-transparent">
            <div id="loading-spinner" class="fixed top-0 left-0 flex justify-center items-center w-screen h-screen bg-transparent">   
                <svg xmlns="http://www.w3.org/2000/svg" width="90" height="90" fill="currentColor" viewBox="0 0 16 16"><path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5M3 8.062C3 6.76 4.235 5.765 5.53 5.886a26.6 26.6 0 0 0 4.94 0C11.765 5.765 13 6.76 13 8.062v1.157a.93.93 0 0 1-.765.935c-.845.147-2.34.346-4.235.346s-3.39-.2-4.235-.346A.93.93 0 0 1 3 9.219zm4.542-.827a.25.25 0 0 0-.217.068l-.92.9a25 25 0 0 1-1.871-.183.25.25 0 0 0-.068.495c.55.076 1.232.149 2.02.193a.25.25 0 0 0 .189-.071l.754-.736.847 1.71a.25.25 0 0 0 .404.062l.932-.97a25 25 0 0 0 1.922-.188.25.25 0 0 0-.068-.495c-.538.074-1.207.145-1.98.189a.25.25 0 0 0-.166.076l-.754.785-.842-1.7a.25.25 0 0 0-.182-.135"/><path d="M8.5 1.866a1 1 0 1 0-1 0V3h-2A4.5 4.5 0 0 0 1 7.5V8a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v1a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1v-.5A4.5 4.5 0 0 0 10.5 3h-2zM14 7.5V13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.5A3.5 3.5 0 0 1 5.5 4h5A3.5 3.5 0 0 1 14 7.5"/></svg>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', async() => {
                try {
                    const response = await fetch('/messages')
                    const messages = response.json();
                    messages.forEach(msg => addMessage(msg.content, msg.sender))
                } catch (error) {
                    console.error("Error fetching messages:", error)
                }
            })

            document.getElementById('form').addEventListener('submit', async function(e) {
                e.preventDefault();
                const input = document.getElementById('input');
                const message = input.value;
                if (message) {
                    addMessage(message, 'user');
                    input.value = '';

                    try {
                        document.getElementById('loading-spinner').classList.remove('hidden')

                        const response = await fetch('/message', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message, sender: 'user' }),
                        });
                        if (!response.ok) throw new Error('Failed to send message');
                        const data = await response.json();
                        animateMessage(data.message, 'bot');
                    } catch (error) {
                        console.error('Error sending message:', error);
                    } finally{
                        document.getElementById('loading-spinner').classList.add('hidden')
                    }
                }
            });

            function addMessage(message, sender) {
                const chatContainer = document.getElementById('chat-container');
                const messageRow = document.createElement('div');
                messageRow.classList.add('flex', 'mb-12');

                const messageContainer = document.createElement('div');
                messageContainer.classList.add('max-w-xl', 'break-words', 'p-2', 'rounded-lg');

                const messageElement = document.createElement('p');
                messageElement.textContent = message;

                messageContainer.appendChild(messageElement);
                messageRow.appendChild(messageContainer);

                if (sender === 'bot') {
                    const botName = document.createElement('div')
                    botName.textContent = 'Kwesi™'
                    botName.classList.add('text-white','align-center', 'font-sans', 'text-base', 'h-5', 'bg-transparent', 'font-bold', 'w-full','text-right')
                    messageContainer.appendChild(botName)

                    const loadingSpinner = document.createElement('div');
                    loadingSpinner.classList.add('loader', 'ease-linear', 'rounded-full', 'border-8', 'border-t-8', 'border-gray-200', 'h-12', 'w-12', 'mr-4');
                    messageRow.insertBefore(loadingSpinner, messageContainer);
                    messageContainer.classList.add('bg-blue-400', 'text-black', 'text-5xl', 'p-4',);
                    messageRow.classList.add('justify-start', 'pl-12');
                } else {
                    const myName = document.createElement('div')
                    myName.textContent = 'Me'
                    myName.classList.add('text-white','align-center', 'font-sans', 'text-base', 'h-5', 'bg-transparent', 'font-bold', 'w-full','text-left')
                    messageContainer.appendChild(myName)
                    messageContainer.classList.add('bg-green-400', 'text-white', 'text-5xl', 'p-4');
                    messageRow.classList.add('justify-end');
                }

                chatContainer.appendChild(messageRow);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            function animateMessage(message, sender) {

                const chatContainer = document.getElementById('chat-container');
                const messageRow = document.createElement('div');
                messageRow.classList.add('flex', 'mb-4');

                const messageContainer = document.createElement('div');
                messageContainer.classList.add('max-w-xl', 'break-words', 'p-4', 'rounded-lg');

                const messageElement = document.createElement('p');
                messageContainer.appendChild(messageElement);
                messageRow.appendChild(messageContainer);

                if (sender === 'bot') {
                    const botName = document.createElement('div')
                    botName.textContent = 'Kwesi™'
                    botName.classList.add('text-white', 'align-center', 'h-5', 'bg-transparent', 'w-full', 'text-base','font-bold','text-right')
                    messageContainer.appendChild(botName)

                    messageContainer.classList.add('bg-blue-400','font-sans', 'text-black', 'text-5xl');
                    messageRow.classList.add('justify-start');
                }

                chatContainer.appendChild(messageRow);
                chatContainer.scrollTop = chatContainer.scrollHeight;

                let i = 0;
                const speed = 10;

                function typeWriter() {
                    if (i < message.length) {
                        messageElement.textContent += message.charAt(i);
                        i++;
                        setTimeout(typeWriter, speed);
                    }
                }

                typeWriter();
            }
        </script>
    </body>

</html>
