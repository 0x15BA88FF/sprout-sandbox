<input class="hidden" id="image-uploader" type="file" accept="image/*">
<input type="hidden" name="images" id="image-holder" required>

<div class="carousel">
    <div class="main-image bg-center bg-cover" id="main-image">
        <div onclick="deleteFile()" class="icon-md delete-button p-2 m-4 bg-background-50 rounded-full shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black"><path d="M6 19C6 19.5304 6.21071 20.0391 6.58579 20.4142C6.96086 20.7893 7.46957 21 8 21H16C16.5304 21 17.0391 20.7893 17.4142 20.4142C17.7893 20.0391 18 19.5304 18 19V8C18 7.44772 17.5523 7 17 7H7C6.44772 7 6 7.44772 6 8V19ZM8 10C8 9.44772 8.44772 9 9 9H15C15.5523 9 16 9.44772 16 10V18C16 18.5523 15.5523 19 15 19H9C8.44772 19 8 18.5523 8 18V10ZM15.9142 4C15.649 4 15.3946 3.89464 15.2071 3.70711L14.7929 3.29289C14.6054 3.10536 14.351 3 14.0858 3H9.91421C9.649 3 9.39464 3.10536 9.20711 3.29289L8.79289 3.70711C8.60536 3.89464 8.351 4 8.08579 4H6C5.44772 4 5 4.44772 5 5V5C5 5.55228 5.44772 6 6 6H18C18.5523 6 19 5.55228 19 5V5C19 4.44772 18.5523 4 18 4H15.9142Z" fill="black"/></svg>
        </div>
    </div>
    <div class="flex gap-2">
        <div id="images-list" class="flex gap-2"></div>
        <label for="image-uploader" class="flex h-max w-max p-4 border-4 border-background-500 border-dashed rounded-lg cursor-pointer">
            <svg class="icon-base fill-background-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18 12.998H13V17.998C13 18.2633 12.8946 18.5176 12.7071 18.7052C12.5196 18.8927 12.2652 18.998 12 18.998C11.7348 18.998 11.4804 18.8927 11.2929 18.7052C11.1054 18.5176 11 18.2633 11 17.998V12.998H6C5.73478 12.998 5.48043 12.8927 5.29289 12.7052C5.10536 12.5176 5 12.2633 5 11.998C5 11.7328 5.10536 11.4785 5.29289 11.2909C5.48043 11.1034 5.73478 10.998 6 10.998H11V5.99805C11 5.73283 11.1054 5.47848 11.2929 5.29094C11.4804 5.1034 11.7348 4.99805 12 4.99805C12.2652 4.99805 12.5196 5.1034 12.7071 5.29094C12.8946 5.47848 13 5.73283 13 5.99805V10.998H18C18.2652 10.998 18.5196 11.1034 18.7071 11.2909C18.8946 11.4785 19 11.7328 19 11.998C19 12.2633 18.8946 12.5176 18.7071 12.7052C18.5196 12.8927 18.2652 12.998 18 12.998Z" fill="black"/></svg>
        </label>
    </div>
</div>

<script>
    const imageData = new FormData();
    const imagesList = document.getElementById('images-list');
    const imagePreview = document.getElementById('main-image');
    const images = "<%= product.images %>".split(",").filter(item => item !== '');

    document.getElementById('image-uploader').addEventListener('change', async function (event) {
        imageData.append('files', event.target.files[0]);

        try {
            const response = await fetch('/upload', { method: 'POST', body: imageData });
            if (!response.ok) { throw new Error(`Network response was not ok ${ response.statusText }`) }
            const result = await response.text();

            const imageName = String(result.replace(/"/g, ''));
            images.unshift(imageName);
            const activeIndex = images.indexOf(imageName);

            setActiveImage(activeIndex);
            clearFormData(imageData); 
        } catch (error) {
            console.error('There was a problem with the fetch operation:', error);
            alert('File upload failed');
        }
    });

    const clearFormData = (formData) => {
        const keys = Array.from(formData.keys());
        keys.forEach(key => formData.delete(key));
    } 

    const deleteFile = () => {
        const imageId = document.getElementById('main-image').getAttribute('data-image');
        const imageIndex = imageId.replace('image-', '');

        fetch(`/delete/${ images[imageIndex] }`, { method: 'DELETE' })
            .then(response => response.text())
            .then(data => {
                images.pop(imageIndex);
                document.getElementById(imageId).remove();
                setActiveImage(0);
            })
            .catch(error => console.error('Error:', error));
    }

    const setActiveImage = (index) => {
        if (images[index] != undefined) {
            imagePreview.style.backgroundImage = `url("/${ images[index] }")`;
            imagePreview.setAttribute('data-image', `image-${ index }`);
        } else {
            imagePreview.setAttribute('data-image', "");
            imagePreview.style.backgroundImage = "";
        }

        document.getElementById("image-holder").value = images;
        let domImages = "";
        images.forEach((image, index) => {
            domImages += (`<img onclick="setActiveImage(${ index })" src="/${ images[index] }" id="image-${ index }" class="flex h-max  rounded-lg">`);
        })
        imagesList.innerHTML = domImages
    }

    setActiveImage(0);
</script>