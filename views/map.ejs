<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./components/head', { title: 'Map' }) %>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>

<body>
    <%- include('./components/navbar', { activeLink: '/map', accountType }) %>

    <div class="map mt-10 fixed top-0 bg-background-400 w-screen h-screen" id="map"></div>

    <section class="fixed bottom-0 z-50 w-full flex flex-col p-4 bg-background-50 rounded-t-lg shadow-lg">
            <div class="header flex items-center justify-between">  
                <h2>Requests</h2>
            </div>
            <div id="requests-container" class="flex flex-col gap-2">
                <p>Nothing here :(</p>
            </div>
    </section>

    <div class="fixed bottom-0 right-0 m-8 flex flex-col items-center gap-2">
        <%- include('./components/assistantButton') %>
    </div>

</body>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    const requestsContainer = document.getElementById("requests-container");

    const map = L.map('map').setView([51.505, -0.09], 13);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: 'Â© OpenStreetMap contributors' }).addTo(map);
    const Icon = L.Icon.extend({ options: { iconSize: [30, 80], shadowSize: [50, 64], iconAnchor: [22, 94], shadowAnchor: [4, 62], popupAnchor: [-3, -76] }});
                L.icon = function (options) { return new L.Icon(options) };
    const driverIcon = new Icon({iconUrl: '/images/driverMarker.svg'});

    let driverMarker;

    const getRequests = async () => {
    const response = await fetch(`/route/requests/<%= id %>`);
        const requests = await response.json();
        requestsContainer.innerHTML = "";

        requests.forEach(request => {
            const requestElement = `
                <div class="user-card">
                    <a href="/deliverySession/<%= id %>">
                        <div class="main">
                            <img class="thumbnail-base" src="${ request.thumbnail }" alt="${ request.title }">
                            <div class="details">
                                <h6>${ request.title }</h6>
                                <p>${ request.distance }m</p>
                            </div>
                        </div>
                    </a>
                    <div class="flex gap-2">
                        <button onclick="acceptRequest('${ request._id }')" class="button primary">Accept</button>
                        <button onclick="declineRequest('${ request._id }')" class="button bad">Decline</button>
                    </div>
                </div>
            `
            requestsContainer.innerHTML += requestElement;
        });
    };

    const acceptRequest = (id) => {
        fetch("/delivery/accept/<%= id %>", { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id }) })
        .then(response => {
            if (!response.ok) { throw new Error('Network response was not ok') }
            return response.text();
        })
        .then(data => { console.log('Request made successfully:', data) })
        .catch(error => { console.error('Error making request:', error) });
    }

    const declineRequest = (id) => {
        fetch("/delivery/cancel/<%= id %>", { method: 'DELETE', headers: { 'Content-Type': 'application/json' } })
        .then(response => {
            if (!response.ok) { throw new Error('Network response was not ok') }
            return response.text();
        })
        .then(data => { console.log('Request made successfully:', data) })
        .catch(error => { console.error('Error making request:', error) });
    }

    const fetchAndUpdateMap = async () => {
        if (!navigator.geolocation) { console.log('Geolocation is not supported by your browser') }

        function error() { console.log('Unable to retrieve your location') }
        function success(position) { getMap([position.coords.latitude, position.coords.longitude ]) }

        navigator.geolocation.getCurrentPosition(success, error);
    }

    const getMap = async (location) => {
        const driverIcon = new Icon({iconUrl: '/images/driverMarker.svg'});

        if (driverMarker) { driverMarker.setLatLng(location) }
        else { driverMarker = L.marker(location, { icon: driverIcon }).addTo(map).bindPopup('Driver') }

        map.setView(location, 19);
    }

    getRequests()
    fetchAndUpdateMap();
    setInterval(getRequests, 1000);
    setInterval(fetchAndUpdateMap, 5000);
</script>
<%- include("./components/background") %>

</html>
