<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./components/head', { title: 'Map' }) %>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        #map svg { fill: none !important }
    </style>
</head>

<body>
    <%- include('./components/navbar', { activeLink: '/map', accountType }) %>

    <div class="map mt-10 fixed top-0 bg-background-400 w-screen h-screen" id="map"></div>

    <section class="fixed bottom-0 z-50 w-full flex flex-col p-4 bg-background-50 rounded-t-lg shadow-[0_35px_60px_15px]">
        <div id="requests-container" class="flex flex-col gap-2">
            <p>Nothing here :(</p>
        </div>
    </section>
</body>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    const dataContainer = document.getElementById("requests-container");

    const map =  L.map('map').setView([51.505, -0.09], 13);
                 L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: 'Â© OpenStreetMap contributors' }).addTo(map);
    const Icon = L.Icon.extend({ options: { iconSize: [30, 80], shadowSize: [50, 64], iconAnchor: [22, 94], shadowAnchor: [4, 62], popupAnchor: [-3, -76] }});
                 L.icon = function (options) { return new L.Icon(options) };
    const driverIcon = new Icon({iconUrl: '/images/driverMarker.svg'});

    let driverMarker;

    const getSessionData = async () => {
        const sessionId = localStorage.getItem('sessionId');

        if (sessionId) {
            const response = await fetch(`/getSessionData/${ sessionId }`);
            const sessionData = await response.json();

            const producerDataRequest = await fetch(`/getUserData/${ sessionData.fromId }`);
            const producer = await producerDataRequest.json();

            const consumerDataRequest = await fetch(`/getUserData/${ sessionData.consumerId }`);
            const consumer = await consumerDataRequest.json();

            const driverDataRequest = await fetch(`/getUserData/${ sessionData.driverId }`);
            const driver = await driverDataRequest.json();

            const routeResponse = await fetch(`http://router.project-osrm.org/route/v1/driving/${ driver.geolocation };${ producer.geolocation };${ consumer.geolocation }?overview=full&geometries=geojson`);
            const route = await routeResponse.json();

            dataContainer.innerHTML = `
                <div class="flex flex-col gap-2">
                    <h1>Arriving in ${ route.routes[0].duration }mins</h1>
                    <p>${ driver.vehicleColor } ${ driver.vehicleModel }, (${ driver.numberPlate })</p>
                    <div class="flex gap-2 justify-between">
                        <a href="/profile/${ consumer._id }">
                            <div class="flex flex-col gap-1 items-center">
                                <img class="rounded-lg bg-background-200 border-2 border-background-200 thumbnail-md" src="/${ consumer.avatar }" alt="Consumer">
                                <p>Consumer</p>
                            </div>
                        </a>
                        <a href="/profile/${ driver._id }">
                            <div class="flex flex-col gap-1 items-center">
                                <img class="rounded-lg bg-background-200 border-2 border-background-200 thumbnail-md" src="/${ driver.avatar }" alt="Driver">
                                <p>Driver</p>
                            </div>
                        </a>
                        <a href="/profile/${ producer._id }">
                            <div class="flex flex-col gap-1 items-center">
                                <img class="rounded-lg bg-background-200 border-2 border-background-200 thumbnail-md" src="/${ producer.avatar }" alt="Producer">
                                <p>Producer</p>
                            </div>
                        </a>
                    </div>
                    <a class="button primary" href="/profile/${ producer._id }">Join Room</a>
                </div>
            `
        } else { getRequests() }
    }

    const getRequests = async () => {
        const response = await fetch(`/route/requests/<%= id %>`);
        const requests = await response.json();
        dataContainer.innerHTML = "";

        requests.forEach(request => {
            const requestElement = `
                <div class="user-card">
                    <a href="/session/${ request._id }">
                        <div class="main">
                            <img class="thumbnail-base" src="${ request.thumbnail }" alt="${ request.title }">
                            <div class="details">
                                <h6>${ request.title }</h6>
                                <p>${ request.distance }m</p>
                            </div>
                        </div>
                    </a>
                    <div class="flex gap-2">
                        <button onclick="acceptRequest('${ request._id }')" class="button primary">Accept</button>
                        <button onclick="declineRequest('${ request._id }')" class="button bad">Decline</button>
                    </div>
                </div>
            `
            dataContainer.innerHTML += requestElement;
        });
    };

    const acceptRequest = (id) => {
        userId = "<%= id %>"
        fetch(`/delivery/accept/${ id }`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId }) })
        .then(response => {
            if (!response.ok) { throw new Error('Network response was not ok') }
            return response.text();
        })
        .then(data => {
            console.log('Request made successfully:', data)
            localStorage.setItem('sessionId', id);
        })
        .catch(error => { console.error('Error making request:', error) });
    }

    const declineRequest = (id) => {
        fetch(`/delivery/cancel/${ id }`, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } })
        .then(response => {
            if (!response.ok) { throw new Error('Network response was not ok') }
            return response.text();
        })
        .then(data => {
            console.log('Request made successfully:', data)
            sessionStorage.setItem("sessionId", "");
        })
        .catch(error => { console.error('Error making request:', error) });
    }

    const fetchAndUpdateMap = async () => {
        if (!navigator.geolocation) { console.log('Geolocation is not supported by your browser') }

        function error() { console.log('Unable to retrieve your location') }
        function success(position) { getMap([position.coords.latitude, position.coords.longitude ]) }

        navigator.geolocation.getCurrentPosition(success, error);
    }

    const getMap = async (location) => {
        const driverIcon = new Icon({iconUrl: '/images/driverMarker.svg'});

        const driverPopup = "Driver";

        if (driverMarker) { driverMarker.setLatLng(location) }
        else { driverMarker = L.marker(location, { icon: driverIcon }).addTo(map).bindPopup(driverPopup) }

        map.setView(location, 19);
    }

    getSessionData()
    fetchAndUpdateMap();
    setInterval(getSessionData, 3000);
    setInterval(fetchAndUpdateMap, 5000);
</script>
<%- include("./components/background") %>

</html>
